service: y2123-api
app: core
org: shankqr
frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript
  - serverless-lift
  - serverless-domain-manager
  - serverless-dotenv-plugin
custom:
  domain:
    dev: api-dev.y2123.io
    prod: api.y2123.io
  customDomain:
    http:
      domainName: ${self:custom.domain.${opt:stage, 'dev'}}
      basePath: ""
      stage: ${self:provider.stage}
      certificateName: "*.y2123.io"
      createRoute53Record: true
      enabled: true
      securityPolicy: tls_1_2
      endpointType: regional
      apiType: http

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage,'dev'}
  region: us-east-1
  environment:
    PRODUCTS_TABLE: '${self:service}-${self:provider.stage}-products'
    METADATA_TABLE: 'admin-y2123-api-citizen-metadata'

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - 'secretsmanager:GetSecretValue'
          Resource:
            - '*'
            - { "Fn::GetAtt": ["ProductsTable", "Arn"] }

constructs:
  commands:
    type: queue
    worker:
      handler: src/handler.sender

functions:
  discordHello:
    handler: src/handler.discordHandler
    reservedConcurrency: 1
    events: 
      - httpApi:
          path: /discord
          method: post
  hello:
    handler: src/handler.hello
    reservedConcurrency: 1
    events:
      - httpApi:
          path: /hello
          method: get
  discordEndpoint:
    handler: src/handler.endpoint
    reservedConcurrency: 1
    events:
      - httpApi:
          path: /discordEndpoint
          method: post
    environment:
      QUEUE_URL: ${construct:commands.queueUrl}
      
  createProduct:
    handler: src/handlers.createProduct
    events:
      - httpApi:
          path: /product
          method: post
  getProduct:
    handler: src/handlers.getProduct
    events:
      - httpApi:
          path: /product/{id}
          method: get
  updateProduct:
    handler: src/handlers.updateProduct
    events:
      - httpApi:
          path: /product/{id}
          method: put
  deleteProduct:
    handler: src/handlers.deleteProduct
    events:
      - httpApi:
          path: /product/{id}
          method: delete
  listProduct:
    handler: src/handlers.listProduct
    events:
      - httpApi:
          path: /products
          method: get

  getAsset:
    handler: src/handlers.asset
    events:
      - httpApi:
          path: /asset
          method: get
  getAccount:
    handler: src/account.handler
    events:
      - httpApi:
          path: /account
          method: get

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: productID
            AttributeType: S
        KeySchema:
          - AttributeName: productID
            KeyType: HASH
